{"level":"info","message":"Request started","requestId":"cdf163cb-0024-4764-b933-20be9ee98a82"}
{"level":"info","message":"[\n"}
{"level":"info","message":{"body":{"query":"Design a login component"},"email":"deepaka@geekyants.com","method":"POST","url":"/component/new"}}
{"level":"info","message":{"component_design":{"new_component_description":"A LoginComponent that should include two Input fields for the username and password, a Button for submitting, and may include additional features like a Checkbox for 'Remember me' and Link for 'Forgot password'. The input fields should have a validation feature to ensure the fields are not empty. Icons can be used for a better UX such as EyeIcon and EyeOffIcon for showing and hiding password visibility. If the username or password are not correct an AlertDialog can appear to warn the user. If the inputs are correct, after clicking the submit Button, a Spinner will be shown until the response is generated.","new_component_icons_elements":{"does_new_component_need_icons_elements":true,"if_so_what_new_component_icons_elements_are_needed":["EyeIcon","EyeOffIcon"]},"new_component_name":"LoginComponent","use_library_components":[{"library_component_name":"Input","library_component_usage_reason":"To allow the user to enter their username and password."},{"library_component_name":"Button","library_component_usage_reason":"To submit the form."},{"library_component_name":"Checkbox","library_component_usage_reason":"To offer a 'Remember me' option."},{"library_component_name":"Link","library_component_usage_reason":"To offer the user a way to recover their password."},{"library_component_name":"AlertDialog","library_component_usage_reason":"To show a warning message when the inputs are not valid."},{"library_component_name":"Spinner","library_component_usage_reason":"To display a loading status while the request is being processed."}]},"context":[{"content":"Your task is to design a new React component for a web app, according to the user's request.\nIf you judge it is relevant to do so, you can specify pre-made library components to use in the task.\nYou can also specify the use of icons if you see that the user's request requires it.","role":"system"},{"content":"Multiple library components can be used while creating a new component in order to help you do a better design job, faster.\n\nAVAILABLE LIBRARY COMPONENTS:\n```\nAlertDialog : AlertDialog effectively interrupts a user's flow and prompts them to take a specific action. It's commonly used for mandatory confirmations or call-to-actions;\nSlider Alert : Alerts are used to communicate the status of a system, feature, or page. They indicate a specific state that may require attention from the user;\nAvatar : The Avatar component is a versatile UI element representing a user with profile pictures, initials, or a fallback icon. It adds a personal touch to the user interface, making it more engaging;\nBadge : The badge component lets you quickly and easily add status indicators to your interface for improved usability. They are designed to be attention-grabbing and quickly convey important information;\nBox : If you're looking for a flexible component to help with low-level layout needs, the Box component might be just what you need. With its customizable styles and props, it can be used to create a wide range of UI elements, from simple containers to complex layout structures;\nButton : A button component is a graphical user interface element that enables users to act by clicking or tapping. It can be customized in size, shape, color, and behavior to fit the design of the application or website;\nCenter : When you need to center-align content, the Center component comes in handy. It is a layout component that can be used with other components to create complex layouts and positioning;\nCheckbox : Whether you're building a simple form or a complex data collection system, the Checkbox component offers a user-friendly way for users to select multiple options from a list;\nDivider : Revamp your content organization with the Divider component! Use it to visually separate different sections of a list or group for a more structured and easy-to-read interface;\nFab : The Floating Action Button (FAB) is a dynamic button that stays visible and provides access to a primary action throughout the user's journey in the application. It is a powerful UI element that adds a touch of elegance and convenience to the user experience;\nFormControl : By using FormControl, developers can provide important context to form elements. This context can include whether the element is invalid, disabled, or required;\nHeading : Heading component gives you the ability to create headings for your page with different sizes and symantics from h1 to h6;\nHStack : HStack arranges its child elements horizontally, making it a suitable layout component for creating a row of items. It is worth noting that Row is just an alternative name for HStack;\nIcon : Icons are often used to enhance the usability and accessibility of digital products by providing users with clear and intuitive visual cues. It serves as an intuitive and easily recognizable way to communicate with users;\nImage : With the Image component, you can enhance the look and feel of your app or website by incorporating compelling imagery;\nInput : The Input component is your go-to tool for gathering user input in a sleek and user-friendly text field. Whether you're designing a simple login form or a complex search feature, this component has got you covered;\nLink : With links, users can navigate seamlessly throughout a website. This component has a hyperlinked appearance for a user-friendly experience;\nModal : A Modal is a window on top of the primary content to draw the user's attention to important information or actions. It provides a focused and interruptive way to interact with the application;\nPopover : Popovers often provide contextual information or quick access to related actions without requiring the user to navigate to a different page or view;\nPressable : By providing access to hover, pressed, and focus events, Pressable serves as a more flexible alternative to buttons at a lower level of abstraction. It is a useful primitive for advanced customization needs;\nProgress : The Progress component is designed to display the progress of a task that involves multiple steps and takes some time to complete. It helps users stay informed about the current status of a lengthy process;\nProvider : GluestackUIProvider component that can be used to configure the library. It consists of StyledProvider, OverlayProvider and ToastProvider internally;\nRadio : The Radio component presents users with predefined choices and enables them to select only one option. It is commonly used for providing a single-choice selection in forms or surveys;\nSlider : The Slider component enables an intuitive selection of values within a designated range. Users can easily adjust their selection by sliding a visual indicator along the track;\nSpinner : Spinners are designed to give visual cues to users that an action is being processed or that a change or result is expected. They are useful for improving the user experience by reducing frustration and uncertainty;\nSwitch : The Switch component offers a stylish alternative to the Checkbox, allowing users to enable or disable an option with a sleek sliding motion. This component is perfect for adding a touch of elegance and interactivity to your user interface;\nText : Looking to add text to your gluestack-ui project? Check out our text component, which supports paragraphs and other formatting options;\nTextarea : The Textarea component is designed to accommodate larger amounts of text input. It allows multi-line input and can be easily customized to fit the user's needs;\nToast : Toast is a component that can display alerts, notifications, or messages on top of an overlay layer. It is commonly used to inform users of important information or actions;\nTooltip : Whether you need to provide helpful hints to new users or display extra details for power users, the Tooltip component is a simple and effective way;\nVStack : VStack organizes items vertically in a layout. Alternatively, you can use Column as an alias for VStack to achieve the same layout;\n```","role":"user"},{"content":"Restrict the icon usage to the following listAddIcon\nArrowLeftIcon\nArrowRightIcon\nArrowUpIcon\nArrowDownIcon\nChevronsLeftIcon\nChevronsRightIcon\nChevronsUpDownIcon\nAtSignIcon\nPaperclipIcon\nBellIcon\nCalendarDaysIcon\nMessageCircleIcon\nCheckIcon\nChevronDownIcon\nChevronUpIcon\nChevronLeftIcon\nChevronRightIcon\nCloseIcon\nCopyIcon\nTrashIcon\nDownloadIcon\nGripVerticalIcon\nEditIcon\nMailIcon\nExternalLinkIcon\nMenuIcon\nInfoIcon\nLinkIcon\nLockIcon\nRemoveIcon\nMoonIcon\nSlashIcon\nCheckCircleIcon\nPhoneIcon\nHelpCircleIcon\nRepeatIcon\nRepeat1Icon\nSearchIcon\nSettingsIcon\nLoaderIcon\nStarIcon\nSunIcon\nClockIcon\nUnlockIcon\nEyeIcon\nEyeOffIcon\nAlertCircleIcon\nCloseCircleIcon\nShareIcon\nCircleIcon\nFavouriteIcon\nGlobeIcon\nThreeDotsIcon\nPlayIcon\n```","role":"user"},{"content":"USER QUERY : \n```\nDesign a login component\n```\n\nYou are a creative designer who is very meticulous in work and designes visually appealing UI, design a component based on your expertises\n","role":"user"}],"email":"deepaka@geekyants.com","query":"Design a login component"}}
{"level":"info","message":[{"content":"Library components can be used while making the new React component\n\nSuggested library component (1/6) : AlertDialog - AlertDialog effectively interrupts a user's flow and prompts them to take a specific action. It's commonly used for mandatory confirmations or call-to-actions.\nSuggested usage : To allow the user to enter their username and password.\n\n\n# AlertDialog can be imported into the new component like this:\n```tsx\nimport {\n  AlertDialog,\n  AlertDialogBackdrop,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogCloseButton,\n  AlertDialogFooter,\n  AlertDialogBody\n} from '@gluestack-ui/themed'\n```\n\n---\n\n# examples of how AlertDialog can be used inside the new component:\n```tsx\n<AlertDialog>\n  <AlertDialogBackdrop />\n  <AlertDialogContent>\n    <AlertDialogHeader>\n      <AlertDialogCloseButton />\n    </AlertDialogHeader>\n    <AlertDialogBody />\n    <AlertDialogFooter />\n  </AlertDialogContent>\n</AlertDialog>\n```\n\n---\n\n# full code examples of React components that use AlertDialog :\nalert-dialog```\nimport React, { useState } from 'react'\nimport {\n  AlertDialog,\n  AlertDialogBackdrop,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogCloseButton,\n  AlertDialogFooter,\n  AlertDialogBody,\n  Button\n} from '@gluestack-ui/themed'\n\nconst AlertDialogExample = () => {\n  const [isOpen, setIsOpen] = useState(false)\n  const onClose = () => setIsOpen(false)\n  const cancelRef = React.useRef()\n\n  return (\n    <>\n      <Button onClick={() => setIsOpen(true)}>Delete Customer</Button>\n      <AlertDialog\n        isOpen={isOpen}\n        leastDestructiveRef={cancelRef}\n        onClose={onClose}\n      >\n        <AlertDialogBackdrop />\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogCloseButton />\n          </AlertDialogHeader>\n          <AlertDialogBody>\n            Are you sure? You can't undo this action afterwards.\n          </AlertDialogBody>\n          <AlertDialogFooter>\n            <Button ref={cancelRef} onClick={onClose}>\n              Cancel\n            </Button>\n            <Button colorScheme='red' onClick={onClose} ml={3}>\n              Delete\n            </Button>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  )\n}\n```","role":"user"},{"content":"Library components can be used while making the new React component\n\nSuggested library component (2/6) : Button - A button component is a graphical user interface element that enables users to act by clicking or tapping. It can be customized in size, shape, color, and behavior to fit the design of the application or website.\nSuggested usage : To submit the form.\n\n\n# Button can be imported into the new component like this:\n```tsx\nimport {\n  Button,\n  ButtonGroup,\n  ButtonText,\n  ButtonSpinner,\n  ButtonIcon\n} from '@gluestack-ui/themed'\n```\n\n---\n\n# examples of how Button can be used inside the new component:\n```tsx\n<ButtonGroup>\n  <Button>\n    <ButtonText />\n    <ButtonSpinner />\n    <ButtonIcon />\n  </Button>\n</ButtonGroup>\n```\n\n---\n\n# full code examples of React components that use Button :\nbutton```\nimport {Box, Center, Button, ButtonText, ButtonIcon, ButtonGroup, Icon, AddIcon, InfoIcon, ButtonSpinner, ArrowUpIcon, Heading, Text, HStack, VStack, ThreeDotsIcon, Input, InputField} from '@gluestack-ui/themed'\nimport React from 'react'\nimport {EditIcon, ArrowLeftIcon} from 'lucide-react-native'\n\nfunction ButtonBasic-isDisabled() {\n\n\n  return (\n<Button action={\"primary\"} variant={\"solid\"} size={\"md\"} isDisabled={true}>\n      <ButtonText>\n        Button\n      </ButtonText>\n    </Button>\n  );\n}\n\nexport default ButtonBasic-isDisabled;\n```","role":"user"},{"content":"Library components can be used while making the new React component\n\nSuggested library component (3/6) : Checkbox - Whether you're building a simple form or a complex data collection system, the Checkbox component offers a user-friendly way for users to select multiple options from a list.\nSuggested usage : To offer a 'Remember me' option.\n\n\n# Checkbox can be imported into the new component like this:\n```tsx\nimport {\n  Checkbox,\n  CheckboxGroup,\n  CheckboxIndicator,\n  CheckboxIcon,\n  CheckboxLabel\n} from '@gluestack-ui/themed'\n```\n\n---\n\n# examples of how Checkbox can be used inside the new component:\n```tsx\n<CheckboxGroup>\n  <Checkbox>\n    <CheckboxIndicator>\n      <CheckboxIcon />\n    </CheckboxIndicator>\n    <CheckboxLabel />\n  </Checkbox>\n</CheckboxGroup>\n```\n\n---\n\n# full code examples of React components that use Checkbox :\ncheckbox```\nimport {\n  Checkbox,\n  CheckboxIndicator,\n  CheckboxIcon,\n  CheckboxLabel\n} from '@gluestack-ui/themed'\n\nconst CheckBoxExample = (props) => {\n  return (\n    <Checkbox {...props}>\n      <CheckboxIndicator mr='$2'>\n        <CheckboxIcon as={CheckIcon} />\n      </CheckboxIndicator>\n      <CheckboxLabel>Label</CheckboxLabel>\n    </Checkbox>\n  )\n}\n```\n\ncheckbox```\nimport { useState } from 'react'\nimport {\n  Checkbox,\n  CheckboxGroup,\n  CheckboxIndicator,\n  CheckboxIcon,\n  CheckboxLabel,\n  Center,\n  CheckIcon,\n  Icon,\n  VStack\n} from '@gluestack-ui/themed'\n\nconst CheckBoxExample = (props) => {\n  const [values, setValues] = useState(['Eng'])\n  return (\n    <CheckboxGroup\n      value={values}\n      onChange={(keys) => {\n        setValues(keys)\n      }}\n    >\n      <VStack space='3xl'>\n        <Checkbox value='Eng'>\n          <CheckboxIndicator mr='$2'>\n            <CheckboxIcon as={CheckIcon} />\n          </CheckboxIndicator>\n          <CheckboxLabel>Framer</CheckboxLabel>\n        </Checkbox>\n        <Checkbox value='invison'>\n          <CheckboxIndicator mr='$2'>\n            <CheckboxIcon as={CheckIcon} />\n          </CheckboxIndicator>\n          <CheckboxLabel>Invision Studio</CheckboxLabel>\n        </Checkbox>\n        <Checkbox value='adobe'>\n          <CheckboxIndicator mr='$2'>\n            <CheckboxIcon as={CheckIcon} />\n          </CheckboxIndicator>\n          <CheckboxLabel>Adobe XD</CheckboxLabel>\n        </Checkbox>\n      </VStack>\n    </CheckboxGroup>\n  )\n}\n```\n\ncheckbox```\nimport React from 'react'\nimport {Center, Text, CheckIcon, Icon, HStack, Checkbox, CheckboxGroup, CheckboxIndicator, CheckboxIcon, CheckboxLabel, Heading, VStack, RemoveIcon, Box, FormControl} from '@gluestack-ui/themed'\n\nfunction CheckboxGroupBasic() {\nconst [values, setValues] = React.useState(['Label 1'])\n\n  return (\n<CheckboxGroup accessibilityLabel=\"Checkbox Group\" value={values} onChange={setValues} nativeID=\"checkbox-group\">\n      <Checkbox m=\"\\$2\" size=\"$1\" isInvalid=\"$1\" isIndeterminate value=\"Label 1\" aria-label=\"Label 1\" accessibilityLabel=\"Checkbox\" onChange={(isSelected: boolean) =>\n  \n  console.log(isSelected, '###')} nativeID=\"checkbox-1\">\n        <CheckboxIndicator mr=\"\\$2\">\n          <CheckboxIcon as={CheckIcon} />\n        </CheckboxIndicator>\n        <CheckboxLabel>Label 1</CheckboxLabel>\n      </Checkbox>\n      <Checkbox m=\"\\$2\" isInvalid=\"$1\" size=\"$1\" aria-label=\"Label 2\" value=\"Label 2\" accessibilityLabel=\"Checkbox\" onChange={(isSelected: boolean) =>\n  \n  console.log(isSelected, '###')} nativeID=\"checkbox-2\">\n        <CheckboxIndicator mr=\"\\$2\">\n          <CheckboxIcon as={CheckIcon} />\n        </CheckboxIndicator>\n        <CheckboxLabel>Label 2</CheckboxLabel>\n      </Checkbox>\n    </CheckboxGroup>\n  );\n}\n\nexport default CheckboxGroupBasic;\n```","role":"user"},{"content":"Library components can be used while making the new React component\n\nSuggested library component (4/6) : Input - The Input component is your go-to tool for gathering user input in a sleek and user-friendly text field. Whether you're designing a simple login form or a complex search feature, this component has got you covered.\nSuggested usage : To offer the user a way to recover their password.\n\n\n# Input can be imported into the new component like this:\n```tsx\nimport { Input, InputField, InputIcon, InputSlot } from '@gluestack-ui/themed'\n```\n\n---\n\n# examples of how Input can be used inside the new component:\n```tsx\n<Input>\n  <InputField />\n  <InputSlot>\n    <InputIcon>{/* Some Icon Component */}</InputIcon>\n  </InputSlot>\n</Input>\n```\n\n---\n\n# full code examples of React components that use Input :\ninput```\nimport React from 'react'\nimport {Input, VStack, Icon, SearchIcon, InputIcon, InputSlot, InputField} from '@gluestack-ui/themed'\nimport {EyeIcon, EyeOffIcon} from 'lucide-react-native'\n\nfunction InputWithIcon-rounded-isInvalid() {\nconst [value, setValue] = React.useState('')\n\n  return (\n<VStack space=\"md\" w=\"\\$full\">\n      <Input size={\"sm\"} variant={\"rounded\"} isInvalid={true} isDisabled={false} size=\"sm\">\n        <InputField onChange={(e: any) => {\n      setValue(e.nativeEvent.text);\n    }} value={value} placeholder=\"Enter Text here\" />\n        <InputSlot pr=\"\\$4\">\n          <InputIcon as={SearchIcon} />\n        </InputSlot>\n      </Input>\n\n      <Input {...props} size=\"md\">\n        <InputField onChange={(e: any) => {\n      setValue(e.nativeEvent.text);\n    }} value={value} placeholder=\"Enter Text here\" />\n        <InputSlot pr=\"\\$4\">\n          <InputIcon as={SearchIcon} />\n        </InputSlot>\n      </Input>\n\n      <Input {...props} size=\"lg\" isDisabled>\n        <InputField onChange={(e: any) => {\n      setValue(e.nativeEvent.text);\n    }} value={value} placeholder=\"Enter Text here\" />\n        <InputSlot pr=\"\\$4\">\n          <InputIcon as={SearchIcon} />\n        </InputSlot>\n      </Input>\n\n      <Input {...props} size=\"xl\" isInvalid>\n        <InputField onChange={(e: any) => {\n      setValue(e.nativeEvent.text);\n    }} value={value} placeholder=\"Enter Text here\" />\n        <InputSlot pr=\"\\$4\">\n          <InputIcon as={SearchIcon} />\n        </InputSlot>\n      </Input>\n    </VStack>\n  );\n}\n\nexport default InputWithIcon-rounded-isInvalid;\n```","role":"user"},{"content":"Library components can be used while making the new React component\n\nSuggested library component (5/6) : Link - With links, users can navigate seamlessly throughout a website. This component has a hyperlinked appearance for a user-friendly experience.\nSuggested usage : To show a warning message when the inputs are not valid.\n\n\n# Link can be imported into the new component like this:\n```tsx\nimport { Link } from '@gluestack-ui/themed'\n```\n\n---\n\n# examples of how Link can be used inside the new component:\n```tsx\n<Link>\n  <LinkText />\n</Link>\n```\n\n---\n\n# full code examples of React components that use Link :\nlink```\nimport {Box, Center, Button, ButtonText, ButtonIcon, ButtonGroup, Icon, AddIcon, InfoIcon, ButtonSpinner, ArrowUpIcon, Heading, Text, HStack, VStack, ThreeDotsIcon, Input, InputField} from '@gluestack-ui/themed'\nimport React from 'react'\nimport {EditIcon, ArrowLeftIcon} from 'lucide-react-native'\n\nfunction ButtonBasic-link-isDisabled() {\n\n\n  return (\n<Button action={\"primary\"} variant={\"link\"} size={\"md\"} isDisabled={true}>\n      <ButtonText>\n        Button\n      </ButtonText>\n    </Button>\n  );\n}\n\nexport default ButtonBasic-link-isDisabled;\n```","role":"user"},{"content":"Library components can be used while making the new React component\n\nSuggested library component (6/6) : Spinner - Spinners are designed to give visual cues to users that an action is being processed or that a change or result is expected. They are useful for improving the user experience by reducing frustration and uncertainty.\nSuggested usage : To display a loading status while the request is being processed.\n\n\n# Spinner can be imported into the new component like this:\n```tsx\nimport { Spinner } from '@gluestack-ui/themed'\nexport default () => <Spinner />\n```\n\n---\n\n# examples of how Spinner can be used inside the new component:\n```tsx\n<Spinner />\n```\n\n---\n\n# full code examples of React components that use Spinner :\nspinner```\nimport { Spinner } from '@gluestack-ui/themed'\nexport default () => <Spinner />\n```\n\nspinner```\nimport { Spinner } from '@gluestack-ui/themed'\n\nconst ExampleSpinner = () => (\n  <VStack space='md'>\n    <Spinner color='$indigo600' />\n    <Spinner color='$emerald600' />\n    <Spinner color='$amber600' />\n    <Spinner color='$fuchsia600' />\n  </VStack>\n)\n```\n\nspinner```\nimport React from 'react'\nimport {Spinner, HStack, Text, VStack} from '@gluestack-ui/themed'\n\nfunction SpinnerBasic() {\n\n\n  return (\n\n  );\n}\n\nexport default SpinnerBasic;\n```","role":"user"},{"content":"The style for this library uses the following ways be careful ans use only the style for this libraryBorder\nxs: Represents an extra-small border radius.\nsm: Represents a small border radius.\nmd: Represents a medium border radius.\nlg: Represents a large border radius.\nxl: Represents an extra-large border radius.\n2xl: Represents a twice-extra-large border radius.\n3xl: Represents a thrice-extra-large border radius.\nfull: Represents a full border radius, creating a circular or fully rounded appearance.\nplatform\n\n```json\n{\n  \"platforms\": [\n    {\n      \"selector\": \"_android\",\n      \"description\": \"Same as the component. Passed props will be applied on Android.\"\n    },\n    {\n      \"selector\": \"_ios\",\n      \"description\": \"Same as the component. Passed props will be applied on iOS.\"\n    },\n    {\n      \"selector\": \"_web\",\n      \"description\": \"Same as the component. Passed props will be applied on web.\"\n    }\n  ]\n}\n```\npositions\n\n```json\n{\n  \"properties\": [\n    {\n      \"abbreviation\": \"position\",\n      \"cssEquivalent\": \"position\",\n      \"themeKey\": \"-\"\n    },\n    {\n      \"abbreviation\": \"zIndex\",\n      \"cssEquivalent\": \"z-index\",\n      \"themeKey\": \"zIndices\"\n    },\n    {\n      \"abbreviation\": \"top\",\n      \"cssEquivalent\": \"top\",\n      \"themeKey\": \"space\"\n    },\n    {\n      \"abbreviation\": \"right\",\n      \"cssEquivalent\": \"right\",\n      \"themeKey\": \"space\"\n    },\n    {\n      \"abbreviation\": \"bottom\",\n      \"cssEquivalent\": \"bottom\",\n      \"themeKey\": \"space\"\n    },\n    {\n      \"abbreviation\": \"left\",\n      \"cssEquivalent\": \"left\",\n      \"themeKey\": \"space\"\n    }\n  ]\n}\n```\n```json\n{\n  \"properties\": [\n    {\n      \"abbreviation\": \"hardShadow\",\n      \"cssEquivalent\": \"box-shadow\",\n      \"themeKey\": \"shadows\"\n    },\n    {\n      \"abbreviation\": \"softShadow\",\n      \"cssEquivalent\": \"box-shadow\",\n      \"themeKey\": \"shadows\"\n    }\n  ]\n}\n```\n## Sizes\n\nThe sizes key allows you to customize the global sizing scale for your project. By default, these spacing values can be referenced by the padding, margin, and top, left, right, and bottom props.\n\n### Sizes Tokens\n\n```json\n[\n  { \"value\": 0, \"representation\": \"0px\" },\n  { \"value\": 1, \"representation\": \"0.5\" },\n  { \"value\": 2, \"representation\": \"4px\" },\n  { \"value\": 3, \"representation\": \"6px\" },\n  { \"value\": 4, \"representation\": \"8px\" },\n  { \"value\": 5, \"representation\": \"10px\" },\n  { \"value\": 6, \"representation\": \"12px\" },\n  { \"value\": 7, \"representation\": \"14px\" },\n  { \"value\": 8, \"representation\": \"16px\" },\n  { \"value\": 9, \"representation\": \"18px\" },\n  { \"value\": 10, \"representation\": \"20px\" },\n  { \"value\": 11, \"representation\": \"24px\" },\n  { \"value\": 12, \"representation\": \"28px\" },\n  { \"value\": 16, \"representation\": \"32px\" },\n  { \"value\": 20, \"representation\": \"36px\" },\n  { \"value\": 24, \"representation\": \"40px\" },\n  { \"value\": 32, \"representation\": \"44px\" },\n  { \"value\": 40, \"representation\": \"48px\" },\n  { \"value\": 48, \"representation\": \"64px\" },\n  { \"value\": 56, \"representation\": \"80px\" },\n  { \"value\": 64, \"representation\": \"96px\" },\n  { \"value\": 72, \"representation\": \"128px\" },\n  { \"value\": 80, \"representation\": \"160px\" },\n  { \"value\": 96, \"representation\": \"192px\" },\n  { \"value\": \"1/2\", \"representation\": \"50%\" },\n  { \"value\": \"1/3\", \"representation\": \"33.333%\" },\n  { \"value\": \"2/3\", \"representation\": \"66.666%\" },\n  { \"value\": \"1/4\", \"representation\": \"25%\" },\n  { \"value\": \"2/4\", \"representation\": \"50%\" },\n  { \"value\": \"3/4\", \"representation\": \"75%\" },\n  { \"value\": \"1/5\", \"representation\": \"20%\" },\n  { \"value\": \"2/5\", \"representation\": \"40%\" },\n  { \"value\": \"3/5\", \"representation\": \"60%\" },\n  { \"value\": \"4/5\", \"representation\": \"80%\" },\n  { \"value\": \"1/6\", \"representation\": \"16.666%\" },\n  { \"value\": \"2/6\", \"representation\": \"33.333%\" },\n  { \"value\": \"3/6\", \"representation\": \"50%\" },\n  { \"value\": \"4/6\", \"representation\": \"66.666%\" },\n  { \"value\": \"5/6\", \"representation\": \"83.333%\" },\n  { \"value\": \"full\", \"representation\": \"100%\" }\n]\n```\n## Space\n\nThe space key allows you to customize the global spacing and sizing scale for your project. By default, these spacing values can be referenced by the padding, margin, and top, left, right, and bottom props.\n\n```json\n{\n  \"properties\": [\n    {\n      \"abbreviation\": \"m\",\n      \"cssEquivalent\": \"margin\",\n      \"themeKey\": \"space\"\n    },\n    {\n      \"abbreviation\": \"mt\",\n      \"cssEquivalent\": \"margin-top\",\n      \"themeKey\": \"space\"\n    },\n    {\n      \"abbreviation\": \"mr\",\n      \"cssEquivalent\": \"margin-right\",\n      \"themeKey\": \"space\"\n    },\n    {\n      \"abbreviation\": \"mb\",\n      \"cssEquivalent\": \"margin-bottom\",\n      \"themeKey\": \"space\"\n    },\n    {\n      \"abbreviation\": \"ml\",\n      \"cssEquivalent\": \"margin-left\",\n      \"themeKey\": \"space\"\n    },\n    {\n      \"abbreviation\": \"mx\",\n      \"cssEquivalent\": \"margin-left and margin-right\",\n      \"themeKey\": \"space\"\n    },\n    {\n      \"abbreviation\": \"my\",\n      \"cssEquivalent\": \"margin-top and margin-bottom\",\n      \"themeKey\": \"space\"\n    },\n    {\n      \"abbreviation\": \"p\",\n      \"cssEquivalent\": \"padding\",\n      \"themeKey\": \"space\"\n    },\n    {\n      \"abbreviation\": \"pt\",\n      \"cssEquivalent\": \"padding-top\",\n      \"themeKey\": \"space\"\n    },\n    {\n      \"abbreviation\": \"pr\",\n      \"cssEquivalent\": \"padding-right\",\n      \"themeKey\": \"space\"\n    },\n    {\n      \"abbreviation\": \"pb\",\n      \"cssEquivalent\": \"padding-bottom\",\n      \"themeKey\": \"space\"\n    },\n    {\n      \"abbreviation\": \"pl\",\n      \"cssEquivalent\": \"padding-left\",\n      \"themeKey\": \"space\"\n    },\n    {\n      \"abbreviation\": \"px\",\n      \"cssEquivalent\": \"padding-left and padding-right\",\n      \"themeKey\": \"space\"\n    },\n    {\n      \"abbreviation\": \"py\",\n      \"cssEquivalent\": \"padding-top and padding-bottom\",\n      \"themeKey\": \"space\"\n    }\n  ]\n}\n```\nTypography\nTo manage Typography options, the tokens object supports the following keys:\nfonts (font families)\nfontSizes\nfontWeights\nlineHeights\nletterSpacings\n\n```json\n{\n  \"properties\": [\n    {\n      \"abbreviation\": \"FontFamily\",\n      \"cssEquivalent\": \"font-family\",\n      \"themeKey\": \"fonts\"\n    },\n    {\n      \"abbreviation\": \"FontSize\",\n      \"cssEquivalent\": \"font-size\",\n      \"themeKey\": \"fontSizes\"\n    },\n    {\n      \"abbreviation\": \"fontWeight\",\n      \"cssEquivalent\": \"font-weight\",\n      \"themeKey\": \"fontWeights\"\n    },\n    {\n      \"abbreviation\": \"lineHeight\",\n      \"cssEquivalent\": \"line-height\",\n      \"themeKey\": \"lineHeights\"\n    },\n    {\n      \"abbreviation\": \"letterSpacing\",\n      \"cssEquivalent\": \"letter-spacing\",\n      \"themeKey\": \"letterSpacings\"\n    },\n    {\n      \"abbreviation\": \"textAlign\",\n      \"cssEquivalent\": \"text-align\",\n      \"themeKey\": \"-\"\n    },\n    {\n      \"abbreviation\": \"fontStyle\",\n      \"cssEquivalent\": \"font-style\",\n      \"themeKey\": \"-\"\n    },\n    {\n      \"abbreviation\": \"textTransform\",\n      \"cssEquivalent\": \"text-transform\",\n      \"themeKey\": \"-\"\n    },\n    {\n      \"abbreviation\": \"textDecoration\",\n      \"cssEquivalent\": \"text-decoration\",\n      \"themeKey\": \"-\"\n    }\n  ]\n}\n```\n","role":"user"}]}
